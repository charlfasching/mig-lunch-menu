{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is a REST API for FoodMenu APP",
    "version" : "1.3.0",
    "title" : "Food Menu API V3"
  },
  "host" : "9nky864y69.execute-api.eu-central-1.amazonaws.com",
  "basePath" : "/test",
  "schemes" : [ "https" ],
  "paths" : {
    "/dish" : {
      "get" : {
        "operationId" : "listDish",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "toDay",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fromDay",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "$ref" : "#/definitions/ArrayOfDishItem"
            }
          },
          "400" : {
            "description" : "400 response",
            "schema" : {
              "$ref" : "#/definitions/MutationResponse"
            }
          }
        },
        "x-amazon-apigateway-request-validator" : "Validate query string parameters and headers",
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseTemplates" : {
                "application/json" : "[\r\n    {\r\n        \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\r\n        \"name\": \"Spaghetti Bolognese\",\r\n        \"servedOn\" : \"2023-09-28\",\r\n        \"price\": 4.6,\r\n        \"description\": \"Spaghetti pasta with beef mince and tomato cream sauce\",\r\n        \"rating\": 3,\r\n        \"image\": \"https://images.pexels.com/photos/6287520/pexels-photo-6287520.jpeg\",\r\n        \"allergies\": [\"Lactose\", \"Gluten\"]\r\n    },\r\n    {\r\n        \"id\" : \"c72bfe44-9de1-4821-80d0-e57dae268d03\",\r\n        \"name\": \"Uitsmijter\",\r\n        \"servedOn\" : \"2023-09-29\",\r\n        \"price\": 3.7,\r\n        \"description\": \"Two fried eggs, two slices of bread with ham and cheese\",\r\n        \"rating\": 5,\r\n        \"image\": \"https://images.pexels.com/photos/6287520/pexels-photo-6287520.jpeg\",\r\n        \"allergies\": [\"Lactose\", \"Gluten\", \"Egg\"]\r\n    }\r\n    \r\n]"
              }
            },
            "400" : {
              "statusCode" : "400",
              "responseTemplates" : {
                "application/json" : "#set($inputRoot = $input.path('$'))\n{\n  \"status\" : \"INVALID_PARAM_FORMAT\",\n  \"advice\" : \"The parameter 'servedOn' has the incorrect format, please adjust to fit 'yyyy-mm-dd' pattern\"\n}"
              }
            }
          },
          "requestTemplates" : {
            "application/json" : "{\r\n  #if( $input.params('code') == \"\" )\r\n    \"statusCode\": 200\r\n  #else\r\n    \"statusCode\": $input.params('code')\r\n  #end\r\n}"
          },
          "passthroughBehavior" : "when_no_match"
        }
      },
      "post" : {
        "operationId" : "addDish",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "DishItem",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DishItem"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "201 response",
            "schema" : {
              "$ref" : "#/definitions/DishItem"
            }
          },
          "400" : {
            "description" : "400 response"
          },
          "409" : {
            "description" : "409 response"
          }
        },
        "x-amazon-apigateway-request-validator" : "Validate body",
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseTemplates" : {
                "application/json" : "{\r\n  \"error\" : false,\r\n  \"msg\" : \"ok, whatever man\"  \r\n}"
              }
            },
            "201" : {
              "statusCode" : "201",
              "responseTemplates" : {
                "application/json" : "#set($inputRoot = $input.path('$'))\n{\n  \"status\" : \"SUCCESS\",\n  \"advice\" : \"Get Hungry\"\n}"
              }
            },
            "400" : {
              "statusCode" : "400",
              "responseTemplates" : {
                "application/json" : "#set($inputRoot = $input.path('$'))\n{\n  \"status\" : \"INVALID_PARAM_FORMAT\",\n  \"advice\" : \"The parameter 'date' has the incorrect format, please adjust to 'yyyy-mm-dd'\"\n}"
              }
            },
            "409" : {
              "statusCode" : "409",
              "responseTemplates" : {
                "application/json" : "#set($inputRoot = $input.path('$'))\n{\n  \"status\" : \"DUPLICATE_CONFLICT\",\n  \"advice\" : \"Item with same name and date already exists\"\n}"
              }
            }
          },
          "requestTemplates" : {
            "application/json" : "{\r\n  #if( $input.params('code') == \"\" )\r\n    \"statusCode\": 201\r\n  #else\r\n    \"statusCode\": $input.params('code')\r\n  #end\r\n}"
          },
          "passthroughBehavior" : "when_no_match"
        }
      }
    },
    "/dish/{id}" : {
      "put" : {
        "operationId" : "updateDish",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "DishItem",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DishItem"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "200 response",
            "schema" : {
              "$ref" : "#/definitions/MutationResponse"
            }
          },
          "400" : {
            "description" : "400 response",
            "schema" : {
              "$ref" : "#/definitions/MutationResponse"
            }
          },
          "404" : {
            "description" : "404 response",
            "schema" : {
              "$ref" : "#/definitions/MutationResponse"
            }
          }
        },
        "x-amazon-apigateway-request-validator" : "Validate body",
        "x-amazon-apigateway-integration" : {
          "type" : "mock",
          "responses" : {
            "default" : {
              "statusCode" : "200",
              "responseTemplates" : {
                "application/json" : "{\n    \"status\" : \"SUCCESS\"\n}"
              }
            },
            "400" : {
              "statusCode" : "400",
              "responseTemplates" : {
                "application/json" : "{\n    \"status\": \"INVALID_BODY_STRUCTURE\",\n    \"advice\": \"Verify that the body content is present and in correct JSON structure\"\n}\n"
              }
            },
            "404" : {
              "statusCode" : "404",
              "responseTemplates" : {
                "application/json" : "{\r\n    \"status\": \"UNKNOWN_ID\",\r\n    \"advice\": \"The requested dish was not found\"\r\n}"
              }
            }
          },
          "requestTemplates" : {
            "application/json" : "{\r\n  #if( $input.params('code') == \"\" )\r\n    \"statusCode\": 200\r\n  #else\r\n    \"statusCode\": $input.params('code')\r\n  #end\r\n}"
          },
          "passthroughBehavior" : "when_no_match"
        }
      }
    }
  },
  "definitions" : {
    "MutationResponse" : {
      "type" : "object",
      "required" : [ "status" ],
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "SUCCESS", "INVALID_BODY_STRUCTURE", "INVALID_PARAM_FORMAT", "DUPLICATE_CONFLICT", "UNKNOWN_ID" ]
        },
        "advice" : {
          "type" : "string"
        }
      }
    },
    "DishItem" : {
      "type" : "object",
      "required" : [ "id", "name", "servedOn" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "format" : "uuid"
        },
        "name" : {
          "type" : "string"
        },
        "servedOn" : {
          "type" : "string",
          "format" : "date"
        },
        "price" : {
          "type" : "number",
          "format" : "float"
        },
        "description" : {
          "type" : "string"
        },
        "rating" : {
          "type" : "integer",
          "minimum" : 1.0,
          "maximum" : 5.0
        },
        "image" : {
          "type" : "string",
          "format" : "uri"
        },
        "allergies" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "ArrayOfDishItem" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/DishItem"
      }
    }
  },
  "x-amazon-apigateway-request-validators" : {
    "Validate body" : {
      "validateRequestParameters" : false,
      "validateRequestBody" : true
    },
    "Validate query string parameters and headers" : {
      "validateRequestParameters" : true,
      "validateRequestBody" : false
    }
  }
}